import { format } from 'date-fns';

/**
 * Converts an array of objects to CSV format
 * @param data Array of objects to convert
 * @returns CSV string
 */
const objectsToCsv = (data: any[]): string => {
  if (data.length === 0) return '';
  
  // Get headers from the first object
  const headers = Object.keys(data[0]);
  
  // Create CSV header row
  const headerRow = headers.join(',');
  
  // Create data rows
  const rows = data.map(obj => {
    return headers.map(header => {
      const value = obj[header];
      // Handle values that need quotes (strings with commas, quotes, or newlines)
      if (typeof value === 'string' && (value.includes(',') || value.includes('"') || value.includes('\n'))) {
        return `"${value.replace(/"/g, '""')}"`;
      }
      return value;
    }).join(',');
  });
  
  // Combine header and data rows
  return [headerRow, ...rows].join('\n');
};

/**
 * Export data to CSV file
 * @param data Array of objects to export
 * @param filename Filename without extension
 */
export const exportToCsv = (data: any[], filename: string): void => {
  const csvContent = objectsToCsv(data);
  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
  const url = URL.createObjectURL(blob);
  
  const link = document.createElement('a');
  link.setAttribute('href', url);
  link.setAttribute('download', `${filename}.csv`);
  link.style.visibility = 'hidden';
  
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
};

/**
 * Export data to PDF file
 * Note: This is a simplified version. In a real application, you would use a library like jsPDF
 * @param data Array of objects to export
 * @param filename Filename without extension
 */
export const exportToPdf = (data: any[], filename: string): void => {
  // In a real implementation, you would use a library like jsPDF
  // For now, we'll just create a simple HTML representation and print it
  
  const printWindow = window.open('', '_blank');
  if (!printWindow) {
    alert('Please allow popups to export PDF');
    return;
  }
  
  // Get headers from the first object
  const headers = Object.keys(data[0]);
  
  // Create HTML table
  let htmlContent = `
    <html>
    <head>
      <title>${filename}</title>
      <style>
        body { font-family: Arial, sans-serif; }
        table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
        h1 { text-align: center; }
        .footer { text-align: center; font-size: 12px; color: #666; margin-top: 30px; }
      </style>
    </head>
    <body>
      <h1>${filename}</h1>
      <p>Generated on ${format(new Date(), 'MMMM d, yyyy')}</p>
      <table>
        <thead>
          <tr>
            ${headers.map(header => `<th>${header}</th>`).join('')}
          </tr>
        </thead>
        <tbody>
  `;
  
  // Add data rows
  data.forEach(row => {
    htmlContent += '<tr>';
    headers.forEach(header => {
      htmlContent += `<td>${row[header]}</td>`;
    });
    htmlContent += '</tr>';
  });
  
  // Close HTML
  htmlContent += `
        </tbody>
      </table>
      <div class="footer">
        Generated by Real Estate CRM
      </div>
      <script>
        window.onload = function() {
          setTimeout(function() {
            window.print();
            window.close();
          }, 500);
        };
      </script>
    </body>
    </html>
  `;
  
  printWindow.document.open();
  printWindow.document.write(htmlContent);
  printWindow.document.close();
};
